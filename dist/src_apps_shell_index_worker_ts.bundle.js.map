{"version":3,"file":"src_apps_shell_index_worker_ts.bundle.js","mappings":";;;;;;;;;;;;;;AAKA,sEAAsE;AACtE,IAAY,gCAEX;AAFD,WAAY,gCAAgC;IAC1C,2FAAuD;AACzD,CAAC,EAFW,gCAAgC,KAAhC,gCAAgC,QAE3C;AAED,mNAAmN;AACnN,IAAY,mBAOX;AAPD,WAAY,mBAAmB;IAC7B,sDAA+B;IAC/B,oEAA6C;IAC7C,kEAA2C;IAC3C,8DAAuC;IACvC,4DAAqC;IACrC,0DAAmC;AACrC,CAAC,EAPW,mBAAmB,KAAnB,mBAAmB,QAO9B;;;;;;;;;;;;;;;;;;ACbkC;AAMjB;AAKgB;AAElC,MAAM,WAAW,GAAG,iBAAiB,CAAC;AAE/B,SAAS,UAAU,CAAC,OAAmB;IAC5C,MAAM,eAAe,GAAG,gFAAqB,EAAE,CAAC;IAEhD,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAiC,EAAE,EAAE;QACpE,mDAAS,EAAE,CAAC,KAAK,CACf,WAAW,EACX,oBAAoB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAC9C,CAAC;QACF,MAAM,UAAU,GAAG,OAAO,CAAC,MAA4B,CAAC;QACxD,QAAQ,UAAU,EAAE,CAAC;YACnB,KAAK,qFAAgC,CAAC,wBAAwB,CAAC,CAAC,CAAC;gBAC/D,MAAM,IAAI,GAAG,OAAO,CAAC,IAA6B,CAAC;gBACnD,OAAO,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC;oBACjC,aAAa,EAAE,qDAAe,CAAC,iBAAiB;oBAChD,OAAO,EAAE;wBACP,MAAM,EAAE,GAAG;wBACX,KAAK,EAAE,GAAG;qBACX;oBACD,KAAK,EAAE;wBACL,IAAI,EAAE,qDAAe,CAAC,MAAM;wBAC5B,WAAW,EAAE;4BACX,CAAC,kDAAY,CAAC,mBAAmB,CAAC,EAAE,IAAI,CAAC,iBAAiB,IAAI,EAAE;yBACjE;qBACF;iBACF,CAAC,CAAC;YACL,CAAC;YACD,KAAK,wEAAmB,CAAC,MAAM,CAAC;YAChC,KAAK,wEAAmB,CAAC,aAAa,CAAC;YACvC,KAAK,wEAAmB,CAAC,YAAY,CAAC;YACtC,KAAK,wEAAmB,CAAC,UAAU,CAAC;YACpC,KAAK,wEAAmB,CAAC,SAAS,CAAC;YACnC,KAAK,wEAAmB,CAAC,QAAQ;gBAC/B,mDAAS,EAAE,CAAC,IAAI,CACd,WAAW,EACX,6DAA6D,UAAU,EAAE,CAC1E,CAAC;gBACF,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;YAC3B;gBACE,mDAAS,EAAE,CAAC,KAAK,CACf,WAAW,EACX,6DAA6D,UAAU,EAAE,CAC1E,CAAC;gBACF,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;QAC7B,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC","sources":["webpack:///./src/apps/shell/constants/shellActions.ts","webpack:///./src/apps/shell/index.worker.ts"],"sourcesContent":["/** names of actions that can come from the Trident shell via different actions a user can take */\r\nexport type TridentShellAction =\r\n  | ArtifactOperationalInsightAction\r\n  | MultiTaskingActions;\r\n\r\n/** action names associated with the Artifact `Operational-Insight` */\r\nexport enum ArtifactOperationalInsightAction {\r\n  CreateOperationalInsight = 'create.operational-insight',\r\n}\r\n\r\n/** actions managing the lifecyle of a tab. These are dispatched from here: https://dev.azure.com/powerbi/PowerBIClients/_git/PowerBIClients?path=trident/libs/extension/registry/src/tabs/digital-operations.ts */\r\nexport enum MultiTaskingActions {\r\n  onInit = 'multitasking.on-init',\r\n  canDeactivate = 'multitasking.can-deactivate',\r\n  onDeactivate = 'multitasking.on-deactivate',\r\n  canDestroy = 'multitasking.can-destroy',\r\n  onDestroy = 'multitasking.on-destroy',\r\n  onDelete = 'multitasking.on-delete',\r\n}\r\n","import {\r\n  ArtifactCreateContext,\r\n  createExtensionClient,\r\n  ExtensionAction,\r\n  InitParams,\r\n} from '@trident/extension-client';\r\nimport {\r\n  EXTENSION_NAMES,\r\n  ExtensionRoutes,\r\n  getLogger,\r\n  SearchParams,\r\n} from '@do/core';\r\nimport {\r\n  ArtifactOperationalInsightAction,\r\n  MultiTaskingActions,\r\n  TridentShellAction,\r\n} from './constants/shellActions';\r\n\r\nconst MODULE_NAME = 'ExtensionWorker';\r\n\r\nexport function initialize(_params: InitParams) {\r\n  const extensionClient = createExtensionClient();\r\n\r\n  extensionClient.action.onAction((message: ExtensionAction<unknown>) => {\r\n    getLogger().debug(\r\n      MODULE_NAME,\r\n      `Received action. ${JSON.stringify(message)}`,\r\n    );\r\n    const actionType = message.action as TridentShellAction;\r\n    switch (actionType) {\r\n      case ArtifactOperationalInsightAction.CreateOperationalInsight: {\r\n        const data = message.data as ArtifactCreateContext;\r\n        return extensionClient.dialog.open({\r\n          extensionName: EXTENSION_NAMES.DigitalOperations,\r\n          options: {\r\n            height: 175,\r\n            width: 400,\r\n          },\r\n          route: {\r\n            path: ExtensionRoutes.create,\r\n            queryParams: {\r\n              [SearchParams.WORKSPACE_OBJECT_ID]: data.workspaceObjectId || '',\r\n            },\r\n          },\r\n        });\r\n      }\r\n      case MultiTaskingActions.onInit:\r\n      case MultiTaskingActions.canDeactivate:\r\n      case MultiTaskingActions.onDeactivate:\r\n      case MultiTaskingActions.canDestroy:\r\n      case MultiTaskingActions.onDestroy:\r\n      case MultiTaskingActions.onDelete:\r\n        getLogger().info(\r\n          MODULE_NAME,\r\n          `[IMDX] Received tab action. Taking no action. ActionType: ${actionType}`,\r\n        );\r\n        return Promise.resolve();\r\n      default:\r\n        getLogger().error(\r\n          MODULE_NAME,\r\n          `[IMDX] Unknown action type. Taking no action. ActionType: ${actionType}`,\r\n        );\r\n        return Promise.resolve();\r\n    }\r\n  });\r\n}\r\n"],"names":[],"sourceRoot":""}